name: Docker镜像打包器（支持超大镜像 + 自动分卷）

on:
  workflow_dispatch:
    inputs:
      docker_images:
        description: '填写镜像名，多个用英文逗号分隔（推荐一次一个超大镜像）'
        required: true
        default: 'quay.io/docling-project/docling-serve'

jobs:
  pack_huge_images:
    runs-on: ubuntu-22.04
    permissions:
      contents: write  # 必须权限，用于删除/创建 Release 和 Tag

    steps:
      - name: 📂 Checkout 代码
        uses: actions/checkout@v4

      - name: 💾 检查初始磁盘空间
        run: df -h .

      - name: 🧰 安装 Skopeo 工具
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo

      - name: 🌊 流式拉取+压缩（不占磁盘！）
        run: |
          images="${{ github.event.inputs.docker_images }}"
          IFS=',' read -r -a image_array <<< "$images"
          
          for image in "${image_array[@]}"; do
            image=$(echo "$image" | xargs)  # 去除首尾空格
            [[ -z "$image" ]] && continue
            
            echo "→ 开始处理: $image"
            # 生成安全文件名（替换 / 和 :）
            safe_name="${image//\//_}"
            safe_name="${safe_name//:/_}"
            filename="${safe_name}-amd64.tar.gz"
            
            # ⭐ 核心：流式处理，直接输出到 gzip，不写中间文件
            skopeo copy \
              --override-arch amd64 \
              --retry-times 3 \
              "docker://$image" \
              "docker-archive:/dev/stdout" | gzip -9 > "$filename"
            
            echo "✓ 打包成功: $filename"
            ls -lh "$filename"
          done

      - name: 💾 检查打包后磁盘空间
        run: df -h .

      - name: 📋 记录生成的文件列表
        id: list_files
        run: |
          FILE=$(find . -maxdepth 1 -name "*.tar.gz" | head -n1)
          if [[ ! -f "$FILE" ]]; then
            echo "❌ 错误：未生成任何镜像包！"
            exit 1
          fi
          echo "处理文件: $FILE"
          echo "SOURCE_FILE=$FILE" >> $GITHUB_ENV
          
          # 生成带时间的 Release 标题
          release_title="Docker镜像包 • $(TZ='Asia/Shanghai' date +'%Y年%m月%d日 %H:%M')"
          echo "RELEASE_TITLE=$release_title" >> $GITHUB_ENV

      - name: ✂️ 自动分卷（每卷 1.9GB，留安全余量）
        run: |
          FILE="${{ env.SOURCE_FILE }}"
          if [[ ! -f "$FILE" ]]; then
            echo "❌ 未找到源文件！"
            exit 1
          fi
          
          echo "→ 开始分卷: $FILE"
          # 分卷压缩，每卷 1900MB（留100MB余量，确保 < 2GB）
          split -b 1900M -d "$FILE" "$FILE.part_"
          echo "✓ 分卷完成，生成文件："
          ls -lh "$FILE.part_"*
          
          # 生成合并脚本
          echo '#!/bin/bash' > merge.sh
          echo '# 🐒 悟空的日常 - 镜像分卷合并脚本' >> merge.sh
          echo '# 许可协议：CC BY-NC-SA 4.0' >> merge.sh
          echo '' >> merge.sh
          echo 'echo "🔄 正在合并分卷..."' >> merge.sh
          echo 'cat *.part_* > image.tar.gz' >> merge.sh
          echo 'echo "✅ 合并完成！"' >> merge.sh
          echo '' >> merge.sh
          echo 'echo "🐳 正在导入 Docker..."' >> merge.sh
          echo 'docker load -i image.tar.gz' >> merge.sh
          echo '' >> merge.sh
          echo 'if [ $? -eq 0 ]; then' >> merge.sh
          echo '  echo "🎉 导入成功！"' >> merge.sh
          echo '  echo "📚 教程与支持：https://wkdaily.cpolar.top/archives/1"' >> merge.sh
          echo 'else' >> merge.sh
          echo '  echo "❌ 导入失败，请检查文件完整性。"' >> merge.sh
          echo 'fi' >> merge.sh
          chmod +x merge.sh
          chmod +x merge.sh
          echo "📄 合并脚本已生成: merge.sh"

      - name: 🗑️【关键】彻底删除旧 Release 和 Tag
        uses: actions/github-script@v7
        with:
          script: |
            const TAG_NAME = 'wukong-amd64-release';
            const { owner, repo } = context.repo;
            
            try {
              // 1. 尝试获取旧 Release
              const release = await github.rest.repos.getReleaseByTag({
                owner, repo, tag: TAG_NAME
              });
              
              // 2. 删除旧 Release
              await github.rest.repos.deleteRelease({
                owner, repo, release_id: release.data.id
              });
              console.log('✅ 旧 Release 已删除');
              
            } catch (error) {
              if (error.status === 404) {
                console.log('ℹ️ 未找到旧 Release，跳过删除');
              } else {
                console.error('⚠️ 删除 Release 失败:', error);
              }
            }
            
            try {
              // 3. 删除旧 Tag（确保完全干净）
              await github.rest.git.deleteRef({
                owner, repo, ref: 'tags/' + TAG_NAME
              });
              console.log('✅ 旧 Tag 已删除');
            } catch (error) {
              if (error.status === 422 && error.message.includes('Reference does not exist')) {
                console.log('ℹ️ 旧 Tag 不存在，跳过删除');
              } else {
                console.error('⚠️ 删除 Tag 失败:', error);
              }
            }

      - name: 🎁 创建 Release 并上传所有文件（一步到位！）
        uses: softprops/action-gh-release@v2
        with:
          tag_name: wukong-amd64-release
          name: ${{ env.RELEASE_TITLE }}
          body: |            
            ### 📥 内网导入方法
            1. 下载本 Release 下所有 `*.part_*` 文件和 `merge.sh`
            2. 放在同一目录下
            3. 执行：
               ```bash
               chmod +x merge.sh
               ./merge.sh
               ```

            ### 📦 本次打包镜像
            ```
            ${{ env.SOURCE_FILE }}
            ```
          draft: false
          prerelease: false
          files: |  # 👈 关键：在这里直接指定要上传的文件！
            *.part_*
            merge.sh
          overwrite_files: true  # 覆盖同名文件
