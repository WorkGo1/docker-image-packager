name: 🚀 Skopeo 流式打包超大镜像（无磁盘压力）

on:
  workflow_dispatch:
    inputs:
      docker_images:
        description: '填写镜像名，多个用英文逗号分隔'
        required: true
        default: 'quay.io/docling-project/docling-serve'

jobs:
  pack_with_skopeo_stream:
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
      - name: 📂 Checkout
        uses: actions/checkout@v4

      - name: 💾 检查初始磁盘空间
        run: df -h .

      - name: 🧰 安装 Skopeo
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo

      - name: 🌊 使用 Skopeo + 流式压缩（终极省空间方案）
        run: |
          images="${{ github.event.inputs.docker_images }}"
          IFS=',' read -r -a image_array <<< "$images"
          
          for image in "${image_array[@]}"; do
            image=$(echo "$image" | xargs)
            [[ -z "$image" ]] && continue
            
            echo "→ 处理镜像: $image"
            safe_name="${image//\//_}"
            safe_name="${safe_name//:/_}"
            filename="${safe_name}-amd64.tar.gz"
            
            # 核心：直接输出到 stdout 并管道给 gzip，避免中间文件
            skopeo copy \
              --override-arch amd64 \
              --retry-times 3 \
              "docker://$image" \
              "docker-archive:/dev/stdout" | gzip -9 > "$filename"
            
            echo "✓ 打包完成: $filename"
            ls -lh "$filename"
          done

      - name: 💾 检查最终磁盘空间（验证是否节省成功）
        run: df -h .

      - name: 📋 列出生成文件
        id: list_files
        run: |
          files=$(find . -name "*.tar.gz" -printf "%f\n" | sort)
          [[ -z "$files" ]] && { echo "❌ 无文件生成"; exit 1; }
          echo "$files"
          echo "FILES<<EOF" >> $GITHUB_ENV
          echo "$files" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          release_name="📦 流式打包 • $(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M')"
          echo "RELEASE_NAME=$release_name" >> $GITHUB_ENV

      - name: 🚫 删除旧资产
        uses: actions/github-script@v7
        with:
          script: |
            const tag = 'stream-amd64-release';
            try {
              const release = await github.rest.repos.getReleaseByTag({owner: context.repo.owner, repo: context.repo.repo, tag});
              const assets = await github.rest.repos.listReleaseAssets({owner: context.repo.owner, repo: context.repo.repo, release_id: release.data.id});
              for (const asset of assets.data) {
                await github.rest.repos.deleteReleaseAsset({owner: context.repo.owner, repo: context.repo.repo, asset_id: asset.id});
                console.log(`🗑️ 删除: ${asset.name}`);
              }
            } catch (error) {
              if (error.status !== 404) throw error;
            }

      - name: 🎁 创建 Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: stream-amd64-release
          name: ${{ env.RELEASE_NAME }}
          body: |
            ### 📥 使用方法
            ```bash
            docker load -i your-image.tar.gz
            ```
            ### 📦 包含镜像
            ```
            ${{ env.FILES }}
            ```

      - name: ⬆️ 上传文件
        uses: softprops/action-gh-release@v2
        with:
          tag_name: stream-amd64-release
          files: '*.tar.gz'
